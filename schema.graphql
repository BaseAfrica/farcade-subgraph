type DeployedGame @entity(immutable: true) {
  id: Bytes!
  gameAddress: Bytes! # address
  admin: Bytes! # address
  timeLimit: BigInt! # uint256
  scorePoint: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Game @entity {
  id: ID!
  admin: Bytes!
  timeLimit: BigInt!
  scorePoint: BigInt!
  isGameStarted: Boolean!
  currentTeam: Int!
  currentRound: Int!
  teams: [TeamCreated!] @derivedFrom(field: "game")
  cards: [CardAdded!] @derivedFrom(field: "game")
}

type CardAdded @entity(immutable: true) {
  id: Bytes!
  game: Game
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameStarted @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerJoinedTeam @entity(immutable: true) {
  id: Bytes!
  team: BigInt! # uint256
  player: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoundStarted @entity(immutable: true) {
  id: Bytes!
  round: BigInt! # uint256
  team: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ScoreUpdated @entity(immutable: true) {
  id: Bytes!
  team: BigInt! # uint256
  score: BigInt! # uint256
  word: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TeamCreated @entity(immutable: true) {
  id: Bytes!
  game: Game
  name: String! # string
  # members: [Any!] # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WordChecked @entity(immutable: true) {
  id: Bytes!
  team: BigInt! # uint256
  player: Bytes! # address
  encryptedWord: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
